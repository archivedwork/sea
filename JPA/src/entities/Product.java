
package entities;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import lombok.Data;
import lombok.EqualsAndHashCode;

@Data
@EqualsAndHashCode(of={"id"})
// This indicates for JPA that this is an entity class
@Entity
// Rename the table - its also possible to specify schema, catalog and indicies
//@Table()
// Add a named query, which can be referenced by name later
@NamedQueries({
        @NamedQuery(
                name = "getAllProducts",
                query = "select p from Product p order by p.id desc")
})
// The Serializable interface is not really necessary for entity classes
public class Product /* implements Serializable */ {
    /* private static final long serialVersionUID = 1L; */

    // Product type (just an example of a nested enumeration)
    public enum Type { A, B, C }

    // Indicates that this field is the primary key
    @Id
    // Its value will be automatically generated by the database
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    // Rename column, and specify the maximum storage length of the string
    @Column(length = 100)
    private String name;

    // Save only the time part of the embedded date instance
    @Temporal(TemporalType.TIME)
    private Date lastModified;

    // Use the string representation of enumeration values on storage
    @Enumerated(EnumType.STRING)
    private Type type;

    // Visible to Java serialization, but not persisted by JPA
    @Transient
    private int calculatedField;

    // Unused by both JPA persistence and Java serialization
    transient Thread saveThread;
}